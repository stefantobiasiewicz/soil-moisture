// Copyright (c) 2023 Nordic Semiconductor ASA
// SPDX-License-Identifier: Apache-2.0

/dts-v1/;
#include <nordic/nrf52833_qiaa.dtsi>

/ {
	model = "st_soil_sensor_52833";
	compatible = "st-soil-sensor-52833";

	zephyr,user{
		io-channels = <&adc 0>, <&adc 1>, <&adc 2>, <&adc 4>;
        pwms = <&pwm0 0 1000 PWM_POLARITY_NORMAL>;
        pwm-names = "generator";
	};

	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,code-partition = &slot0_partition;
		zephyr,console = &uart0;
	};

	pwmleds {
		compatible = "pwm-leds";
		status = "okay";
	
		led_pwm_0: led_pwm0 {
				status = "okay";
				pwms = <&pwm1 0 PWM_USEC(256) PWM_POLARITY_NORMAL>;
				label = "LED0 red";
		};
	
		led_pwm_1: led_pwm1 {
				status = "okay";
				pwms = <&pwm1 1 PWM_USEC(256) PWM_POLARITY_NORMAL>;
				label = "LED0 green";
		};
	
		led_pwm_2: led_pwm2 {
				status = "okay";
				pwms = <&pwm1 2 PWM_USEC(256) PWM_POLARITY_NORMAL>;
				label = "LED0 blue";
		};
	};

	outputs {
		compatible = "gpio-leds";
		 power_high_out: power_high {
			 gpios = <&gpio0 24 GPIO_ACTIVE_LOW>;
			 label = "power high";
		};   	 		        
		power_internal_out: power_internal {
			 gpios = <&gpio0 13 GPIO_ACTIVE_LOW>;
			 label = "power internal";
		};   	 		 	 		        
		eink_rst_out: eink_rst {
			 gpios = <&gpio0 26 GPIO_ACTIVE_LOW>;
			 label = "eink reset";
		};   	 				 	 		         		
	 };  

	buttons {
		compatible = "gpio-keys";
		button0: button_0 {
			gpios = <&gpio0 31 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "button left";
		};
		button1: button_1 {
			gpios = <&gpio0 9 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "button right";
		};
		eink_busy_in: eink_busy {
			gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;
			label = "eink busy";
	   };   	
	};

	/* These aliases are provided for compatibility with samples */
	aliases {
		pwm-led-r = &led_pwm_0;
		pwm-led-g = &led_pwm_1;
		pwm-led-b = &led_pwm_2;
		button-left = &button0;
		button-right = &button1;
	};
};

&gpiote {
    status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&i2c0 {
	status = "okay";
	pinctrl-0 = <&i2c0_default>;
	pinctrl-1 = <&i2c0_sleep>;
	pinctrl-names = "default", "sleep";
	clock-frequency = <I2C_BITRATE_STANDARD>;
	eink_1in9_com_i2c: eink@3C{
		status = "okay";
        compatible = "i2c-device";
        reg = < 0x3C >;
        label = "eink_1in9_com";
    };
	eink_1in9_data_i2c: eink@3D{
		status = "okay";
        compatible = "i2c-device";
        reg = < 0x3D >;
        label = "eink_1in9_data";
    };
};


&uart0 {
	status = "okay";
	// tx-pin = < 3 >;
	current-speed = <115200>;
	pinctrl-0 = < &uart0_default >;
	pinctrl-1 = <&uart0_sleep>;
	pinctrl-names = "default", "sleep";
};

&adc {
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	channel@0 {
		reg = <0>;
		zephyr,gain = "ADC_GAIN_1_6";
		zephyr,reference = "ADC_REF_INTERNAL";
		// zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,acquisition-time = < ADC_ACQ_TIME_DEFAULT >;
		zephyr,input-positive = <NRF_SAADC_AIN2>; /* P0.05 */
		zephyr,resolution = <12>;
	};

	channel@1 {
		reg = <1>;
		zephyr,gain = "ADC_GAIN_1_6";
		zephyr,reference = "ADC_REF_INTERNAL";
		// zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,acquisition-time = < ADC_ACQ_TIME_DEFAULT >;
		zephyr,input-positive = <NRF_SAADC_AIN3>; /* P0.05 */
		zephyr,resolution = <12>;
	};

	channel@2 {
		reg = <2>;
		zephyr,gain = "ADC_GAIN_1_6";
		zephyr,reference = "ADC_REF_INTERNAL";
		// zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,acquisition-time = < ADC_ACQ_TIME_DEFAULT >;
		zephyr,input-positive = <NRF_SAADC_AIN6>; /* P0.05 */
		zephyr,resolution = <12>;
	};

	channel@4 {
		reg = <4>;
		zephyr,gain = "ADC_GAIN_1_6";
		zephyr,reference = "ADC_REF_INTERNAL";
		// zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,acquisition-time = < ADC_ACQ_TIME_DEFAULT >;
		zephyr,input-positive = <NRF_SAADC_VDD>; 
		zephyr,resolution = <12>;
	};
};


// SOMETHINKG NOT WORK WITH THAT
&pinctrl {
	pwm1_default: pwm1_default_alt {
		group1 {
				psels = <NRF_PSEL(PWM_OUT0, 0, 2)>,
						<NRF_PSEL(PWM_OUT1, 0, 29)>,
						<NRF_PSEL(PWM_OUT2, 1, 5)>;
				nordic,invert;
		};
	};
	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 0, 2)>,
			<NRF_PSEL(PWM_OUT1, 0, 29)>,
			<NRF_PSEL(PWM_OUT2, 1, 5)>;
			nordic,invert;	
			low-power-enable;
		};
	};
	pwm0_default: pwm0_default_alt {
		group0 {
			psels = <NRF_PSEL(PWM_OUT0, 1, 9)>;
		};
	};
	pwm0_sleep: pwm0_sleep {
		group1 {
			psels = <NRF_PSEL(PWM_OUT0, 1, 9)>;
			nordic,invert;
			low-power-enable;
		};
	};
	uart0_default: uart0_default {
        group1 {
            psels = <NRF_PSEL(UART_TX, 0, 3)>;
        };
        group2 {
            psels = <NRF_PSEL(UART_RX, 1, 1)>;
            bias-pull-up;
        };
    };
	uart0_sleep: uart0_sleep {
		group1 {
            psels = <NRF_PSEL(UART_TX, 0, 3)>;
    		low-power-enable;
		};
        group2 {
            psels = <NRF_PSEL(UART_RX, 1, 1)>;
            bias-pull-up;
			low-power-enable;
	    };
	};

	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SCL, 0, 25)>, <NRF_PSEL(TWIM_SDA, 0, 10)>;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SCL, 0, 25)>, <NRF_PSEL(TWIM_SDA, 0, 10)>;
			low-power-enable;
		};
	};
};

&pwm0 {
    status = "okay";
    // ch0-pin = < 41 >;
	pinctrl-0 = < &pwm0_default >;	
	pinctrl-1 = < &pwm0_sleep >;
	pinctrl-names = "default", "sleep";
};

&pwm1 {
	status = "okay";
	// ch0-pin = < 2 >;
	// ch1-pin = < 29 >;
	// ch2-pin = < 37 >;
	pinctrl-0 = <&pwm1_default>;
	pinctrl-1 = <&pwm1_sleep>;
	pinctrl-names = "default", "sleep";

	// pinctrl-names = "default";
};



&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x0 0xc000>;
		};
		slot0_partition: partition@c000 {
			label = "image-0";
			reg = <0xc000 0x32000>;
		};
		slot1_partition: partition@3e000 {
			label = "image-1";
			reg = <0x3e000 0x32000>;
		};
		scratch_partition: partition@70000 {
			label = "image-scratch";
			reg = <0x70000 0xa000>;
		};
		storage_partition: partition@7a000 {
			label = "storage";
			reg = <0x7a000 0x6000>;
		};
	};
};

